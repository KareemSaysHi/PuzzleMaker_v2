GUI
- dictionary of pieces
- dictionary of positions
- dictionary of openGL objects
- dictionary of colors

- done:
    - basic pan, rotate, zoom controls with mouse

- to do:
    - interactions between assembly states and dissassembly depth
    - zoom into point
    - start zoomed out instead of being inside
    - light mode lol

PUZZLE DESIGN: ASSEMBLY
- to do 6/10:
    - algorithm for making polyominoes of certain size, returning usable ones in text file

- to do 6/11
    - finish text file implementation
    - assembly pt 1! (finish tomorrow if not done)

    ideas for 6/11

    abstract box?
    all canonical positions are at (0,0,0)

    *places it can be in
    *places it must be in

pseudocode:



for position in possible positions:
 choose largest piece, choose rotation of it
 recursively choose next piece until we're at the last pos

Box symmetry problem 6/12:
    
    We want to stop solutions where the solution is a rotation of another solution.

    To fix this, I want to find the symmetries of the required positions.

    If I find a rotation that is the same as another, I can restrict the "supplementary" rotation of the first piece in order to stop the solution from happening twice.

    Steps to do this
        1. find all 24 rotations of required positions
        2. make a tally of each "type" of repeat, and keep track of OPERATION that creates it
        3. keep one of each "type" of repeat
        4. find first piece's "supplementary" rotation of this
        5. remove that rotation from it's list of "allowable" rotations